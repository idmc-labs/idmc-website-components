name: CI

on:
  pull_request:
  push:
    branches:
      - release

jobs:
  build_test:
    name: üö¥ Build + Lint + Test üö¥  # Match the name below (8398a7/action-slack).
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: üê≥ Prepare Docker
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="ghcr.io/${GITHUB_REPOSITORY}"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}
      - name: üê≥ Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: üê≥ Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: üê≥ Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          push: false # This would be set to true in a real world deployment scenario.
          load: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: ü§û Run Lint üß™
        env:
            DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
        run: |
          docker run --rm --workdir="/code/" $DOCKER_IMAGE sh -c 'yarn lint'

      # - name: ü§û Run Test üß™
      #   env:
      #       DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
      #   run: |
      #     docker run --rm --workdir="/code/" $DOCKER_IMAGE sh -c 'yarn test'

      - name: ü§û Run Build üß™
        env:
            DOCKER_IMAGE: ${{ steps.prep.outputs.tagged_image }}
            REACT_APP_GRAPHQL_ENDPOINT: https://gidd-idmc.dev.datafriendlyspace.org/graphql/
            REACT_APP_HELIX_ENDPOINT: https://backend.idmcdb.org
            REACT_APP_REST_ENDPOINT: https://gidd-api.idmcdb.org/api
            REACT_APP_ENVIRONMENT: prod
            REACT_APP_SENTRY_DSN:  ${{ secrets.REACT_APP_SENTRY_DSN }}
            REACT_APP_MAPBOX_STYLE: mapbox://styles/idmcda/cjasa8fvu6hp92spaeobt52k6
            REACT_APP_MAPBOX_ACCESS_TOKEN: pk.eyJ1IjoiaWRtY2RhIiwiYSI6ImNqY2JyNDZzazBqa2gycG8yNTh2eHM4dGYifQ.EOazpb8QxCCEKhhtrVjnYA
            # Not required for now.
            GRAPHQL_CODEGEN_ENDPOINT:
            REACT_APP_DRUPAL_ENDPOINT:
            REACT_APP_GA_TRACKING_ID:
        run: |
          env > .env
          docker run --rm --workdir="/code/" -v `pwd`/.env:/code/.env -v `pwd`/build/:/code/build/ $DOCKER_IMAGE sh -c 'yarn build'

      - name: Save build files as artifact
        uses: actions/upload-artifact@v1
        with:
          name: idmc-website-components
          path: build

        # Temp fix
        # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#github-cache
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: üê≥ Move docker cache (üßô Hack fix)
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to AWS (S3 + Cloudfront)
    needs: build_test
    runs-on: ubuntu-latest
    environment:
      name: Release
      url: https://idmc-website-components.idmcdb.org

    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: idmc-website-components
          path: build

      # Copy build to S3
      - name: S3 Sync
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          SOURCE_DIR: './build'

      # Invalidate Cloudfront (this action)
      - name: Cloudfront Invalidate
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ secrets.AWS_DISTRIBUTION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:  ${{ secrets.AWS_REGION }}
          PATHS: '/*'
